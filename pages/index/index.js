// index.js
// 获取应用实例
import * as echarts from '../../ec-canvas/echarts';
const app = getApp()
var charts = ['','','']

var dataa=[24.231 , 28.446 , 25.243 , 21.215 , 19.285 , 18.104 , 19.293 ,
  20.685 , 20.045 , 14.243 ,  7.6301,  1.0984, 10.607 , 19.992 ,
  23.804 , 29.906 , 30.252 , 28.297 , 23.893 , 20.935 , 20.15  ,
  20.539 , 21.483 , 21.104 , 19.688 , 15.23  , 11.309 , 10.493 ,
  10.6   , 11.754 ,  3.8836,  5.3953, 14.137 , 22.15  , 29.5   ,
  33.102 , 31.898 , 28.005 , 23.386 , 18.95  , 17.368 , 18.462 ,
  19.215 , 18.183 , 17.686 , 12.189 ,  5.0636,  7.0335, 14.624 ,
  20.715 , 26.411 , 27.707 , 27.024 , 24.577 , 23.46  , 23.845 ,
  23.623 , 25.054 , 18.982 , 17.246 , 12.342 , 17.991 , 19.803 ,
  18.462 , 14.5   ,  5.4509,  3.1311, 12.98  , 23.712 , 28.919 ,
  31.467 , 30.742 , 25.635 , 21.762 , 21.061 , 17.092 , 19.293 ,
  21.71  , 21.696 , 18.682 , 13.193 ,  9.4811,  7.1293, 12.644 ,
  20.049 , 25.103 , 25.552 , 25.151 , 22.14  , 20.21  , 25.184 ,
  28.016 , 22.407 , 20.506 , 23.623 , 29.005 , 32.423 , 34.74  ,
  32.689 , 26.283 , 18.786 , 12.91  , 13.943 , 21.275 , 25.644 ,
  29.841 , 29.357 , 26.046 , 20.273 , 16.677 , 17.026 , 19.928 ,
  23.172 , 24.172 , 23.279 , 18.786 , 12.775 ,  6.2741,  5.8383,
   8.5262, 12.434 , 14.248 , 20.598 , 28.749 , 34.584 , 35.435 ,
  32.334 , 27.318 , 21.374 , 21.448 , 23.302 , 27.052 , 29.13  ,
  27.802 , 26.777 , 20.598 , 13.791 ,  9.7168, 14.681 , 21.2   ,
  24.907 , 26.468 , 26.066 , 22.082 , 19.391 , 19.282 , 19.125 ,
  22.448 , 18.962 , 19.105 , 23.382 , 34.255 , 35.7   , 34.474 ,
  27.729 , 20.254 , 15.319 , 20.321 , 28.329 , 32.065 , 33.968 ,
  30.095 , 23.305 , 19.045 , 17.614 , 16.812 , 22.501 , 26.3   ,
  26.752 , 25.776 , 19.184 , 12.91  ,  8.5967, 10.493 , 19.317 ,
  25.205 , 25.822 , 26.308 , 21.363 , 18.746 , 13.141 , 15.52  ,
  14.453 , 13.026 , 12.434 , 11.964 , 11.369 , 13.284 , 12.698 ,
  11.547 ,  9.9241,  7.0335,  5.8254,  8.623 ,  9.9013, 12.91  ,
  14.655 , 15.001 , 13.408 , 11.323 ,  9.3932,  9.0664,  7.8637,
   8.3022,  8.5439,  8.2292,  6.7935,  4.5456,  5.1081,  5.4092,
   5.9408,  3.9984,  5.8254,  9.9847, 13.681 , 16.162 , 16.39  ,
  14.416 , 13.21  , 11.269 ,  9.9847, 10.097 , 10.818 , 10.832 ,
  10.936 ,  9.3932,  7.4703,  6.029 ,  7.4703, 10.253 , 12.839 ,
  14.137 , 15.126 , 14.557 , 12.822 , 10.818 ,  7.738 ,  7.161 ,
   5.4509,  5.0636, 10.097 , 12.91  , 13.101 , 13.587 , 11.422 ,
   8.9407,  5.7734,  6.322 ,  9.058 , 11.964 , 13.731 , 14.885 ,
  13.725 , 12.391 , 11.741 ,  9.5918,  8.3835,  9.1409, 10.216 ,
  10.77  ,  9.0996,  8.1648,  6.2741,  6.7824, 10.685 , 12.506 ,
  14.243 , 14.369 , 12.095 , 10.791 , 27.572 , 31.642 , 29.577 ,
  24.144 , 20.898 , 19.737 , 22.145 , 23.201 , 22.544 , 17.439 ,
   9.0001,  1.9047, 12.041 , 22.091 , 26.394 , 31.972 , 32.152 ,
  30.87  , 27.241 , 24.393 , 21.904 , 22.955 , 23.339 , 24.343 ,
  22.924 , 17.925 , 13.137 , 12.112 , 11.757 , 13.196 ,  3.662 ,
   6.0355, 16.103 , 25.103 , 32.15  , 36.118 , 35.421 , 30.276 ,
  25.316 , 20.135 , 19.651 , 21.952 , 22.479 , 19.813 , 19.262 ,
  13.026 ,  5.2895,  8.0267, 16.627 , 23.292 , 28.469 , 30.211 ,
  30.271 , 27.106 , 25.735 , 25.73  , 26.113 , 27.771 , 22.222 ,
  19.362 , 14.768 , 18.215 , 21.283 , 20.371 , 16.278 ,  8.4527,
   3.8953, 13.88  , 25.343 , 31.3   , 34.385 , 33.491 , 28.438 ,
  23.944 , 22.969 , 20.436 , 21.057 , 22.397 , 22.592 , 19.65  ,
  13.944 , 10.719 ,  9.3436, 15.965 , 22.537 , 27.227 , 27.873 ,
  26.693 , 23.641 , 22.111 , 28.394 , 31.086 , 28.215 , 24.926 ,
  27.407 , 32.042 , 36.077 , 38.205 , 36.541 , 29.405 , 20.226 ,
  13.844 , 16.644 , 23.056 , 27.544 , 32.232 , 30.816 , 28.249 ,
  23.107 , 19.732 , 18.834 , 22.757 , 25.612 , 28.179 , 26.559 ,
  21.348 , 12.808 ,  6.0865,  7.7455,  9.986 , 14.414 , 15.115 ,
  21.886 , 31.234 , 37.538 , 38.979 , 35.828 , 29.166 , 23.445 ,
  23.733 , 25.933 , 31.215 , 33.178 , 31.09  , 30.024 , 22.946 ,
  14.391 , 10.909 , 16.031 , 22.59  , 25.569 , 28.84  , 28.316 ,
  24.896 , 20.228 , 20.668 , 21.132 , 24.457 , 21.584 , 20.692 ,
  27.829 , 37.152 , 40.09  , 38.91  , 31.545 , 22.083 , 15.408 ,
  19.973 , 31.044 , 36.007 , 37.019 , 33.125 , 26.567 , 20.639 ,
  19.606 , 20.433 , 24.358 , 27.765 , 28.841 , 27.017 , 21.279 ,
  13.539 ,  7.7891, 10.804 , 20.481 , 27.138 , 28.26  , 28.    ,
  23.783 , 20.473 , 14.445 , 17.321 , 17.393 , 14.88  , 13.978 ,
  13.007 , 13.138 , 14.43  , 14.441 , 13.191 , 10.789 ,  7.8829,
   7.2161,  9.7155, 10.775 , 14.281 , 15.641 , 16.219 , 15.207 ,
  13.51  , 10.729 ,  9.9763,  9.5682,  9.6423, 10.13  ,  9.124 ,
   6.6148,  4.8814,  6.1074,  6.5418,  5.7653,  4.1146,  6.1185,
  10.941 , 15.196 , 18.079 , 18.647 , 16.512 , 14.883 , 12.554 ,
  11.327 , 11.698 , 12.125 , 12.042 , 11.703 , 10.364 ,  8.0877,
   6.9466,  8.0729, 11.327]

function initChart(canvas, width, height, dpr) {
  console.log(width, height)
  const chart = echarts.init(canvas, null, {
   width: width,
   height: height,
   devicePixelRatio: dpr // new
 });
 canvas.setChart(chart);

 var option = {

   xAxis: {
     type: 'category',
     boundaryGap: false,
     data: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,
       38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,
       75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,
       110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,
       140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,
       170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199
     ],
    //  show: false
   },
   yAxis: {
     x: 'center',
     type: 'value',
     splitLine: {
       lineStyle: {
         type: 'dashed'
       }
     }
     // show: false
   },
   series: [{
     type: 'line',
     symbol:'none',
     smooth: true,
     data:[]
   }]
 };
 chart.setOption(option);
 console.log(chart)
 return chart;
}

Page({
  data: {
    SystemInfo:{},
    ec: {
      onInit: initChart
    },
    ec1: {
      onInit: initChart
    },
    ec2: {
      onInit: initChart
    },
    current:"aaa"
  },
  onLoad() {
    console.log(app.globalData.HOST)
    wx.getSystemInfo({
      success: (result) => {
        const tabbarHeight = ( result.screenHeight - result.windowHeight - result.statusBarHeight )
        this.setData({
          SystemInfo:result,
          tabbarHeight:tabbarHeight
        })
      },
    })
  },
  echartInit (e) {
    console.log(e)
    initChart(e.detail.canvas, e.detail.width, e.detail.height);
  },

  changeChartData:function(params) {
    var option = chart.getOption()
    var index = this.data.index
    var all_data = this.data.all_data
    var that = this
    console.log(index)
    if(index<300){
      option.series[0].data = all_data.slice(index,index+200);
      chart.setOption(option);
      console.log(chart.getOption())
      that.setData({
        index:index+1
      })
    }
  },

  switchBtn1(e){
    this.setData({
      current:"aaa"
    })
    var chart = this.selectComponent('#mychart-dom-bar').chart
    var option = chart.getOption()
    option.series.push({
      type: 'line',
      symbol:'none',
      smooth: true,
      data:dataa
    })
    chart.setOption(option)
  },
  switchBtn2(e){
    this.setData({
      current:"bbb"
    })
    var chart = this.selectComponent('#mychart-dom-bar1').chart
    var option = chart.getOption()
    option.series.push({
      type: 'scatter',
      symbolSize:5,
      data:dataa,

    })
    chart.setOption(option)
  },
  switchBtn3(e){
    this.setData({
      current:"ccc"
    })
  },


})
